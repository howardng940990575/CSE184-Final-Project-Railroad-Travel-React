{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["require","App","props","getOption","color","series","name","value","forEach","item","i","push","type","coordinateSystem","zlevel","rippleEffect","brushType","label","normal","show","position","formatter","symbolSize","itemStyle","data","state","backgroundColor","title","text","subtext","left","textStyle","tooltip","trigger","legend","orient","top","selectedMode","geo","map","center","zoom","emphasis","roam","areaColor","borderColor","onChartClick","param","console","log","error","shanghai","shanghai_station","zhejiang","zhejiang_station","jiangsu","jiangsu_station","Object","keys","length","maps_y","maps_x","onEvents","this","onDataZoom","className","ref","e","echarts_react","option","style","height","width","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a339c3fc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport ReactEcharts from \"echarts-for-react\";\r\nimport shanghai_station from './shanghai_station_english.json'\r\nimport zhejiang_station from './zhejiang_station_english.json'\r\nimport jiangsu_station from './jiangsu_station_english.json'\r\nrequire(\"echarts/map/js/china.js\");\r\nclass App extends Component {\r\n        constructor(props){\r\n            super(props)\r\n            var shanghai = shanghai_station\r\n            var zhejiang = zhejiang_station\r\n            var jiangsu = jiangsu_station\r\n            this.state = {\r\n                value:[{}]  \r\n            }\r\n            for(var i=0;i<Object.keys(shanghai.name).length;i++){\r\n                this.state.value.push({name:shanghai.name[i],value: [shanghai.maps_y[i],shanghai.maps_x[i]]})\r\n            }\r\n            for(var i=0;i<Object.keys(zhejiang.name).length;i++){\r\n                this.state.value.push({name:zhejiang.name[i],value: [zhejiang.maps_y[i],zhejiang.maps_x[i]]})\r\n            }\r\n            for(var i=0;i<Object.keys(jiangsu.name).length;i++){\r\n                this.state.value.push({name:jiangsu.name[i],value: [jiangsu.maps_y[i],jiangsu.maps_x[i]]})\r\n            }\r\n            console.log(\"shanghaittt\"+this.state.value)\r\n\r\n        }\r\n    getOption = () => {\r\n        \r\n\r\n        const geoCoordMap = {\r\n            'sbb': [121.4648,31.2891],\r\n            '东莞': [113.8953,22.901],\r\n            '东营': [118.7073,37.5513],\r\n            '中山': [113.4229,22.478],\r\n            '临汾': [111.4783,36.1615],\r\n            '临沂': [118.3118,35.2936],\r\n            '丹东': [124.541,40.4242],\r\n            '丽水': [119.5642,28.1854],\r\n            '乌鲁木齐': [87.9236,43.5883],\r\n            '佛山': [112.8955,23.1097],\r\n            '保定': [115.0488,39.0948],\r\n            '兰州': [103.5901,36.3043],\r\n            '包头': [110.3467,41.4899],\r\n            '北京': [116.4551,40.2539],\r\n            '北海': [109.314,21.6211],\r\n            '南京': [118.8062,31.9208],\r\n            '南宁': [108.479,23.1152],\r\n            '南昌': [116.0046,28.6633],\r\n            '南通': [121.1023,32.1625],\r\n            '厦门': [118.1689,24.6478],\r\n            '台州': [121.1353,28.6688],\r\n            '合肥': [117.29,32.0581],\r\n            '呼和浩特': [111.4124,40.4901],\r\n            '咸阳': [108.4131,34.8706],\r\n            '哈尔滨': [127.9688,45.368],\r\n            '唐山': [118.4766,39.6826],\r\n            '嘉兴': [120.9155,30.6354],\r\n            '大同': [113.7854,39.8035],\r\n            '大连': [122.2229,39.4409],\r\n            '天津': [117.4219,39.4189],\r\n            '太原': [112.3352,37.9413],\r\n            '威海': [121.9482,37.1393],\r\n            '宁波': [121.5967,29.6466],\r\n            '宝鸡': [107.1826,34.3433],\r\n            '宿迁': [118.5535,33.7775],\r\n            '常州': [119.4543,31.5582],\r\n            '广州': [113.5107,23.2196],\r\n            '廊坊': [116.521,39.0509],\r\n            '延安': [109.1052,36.4252],\r\n            '张家口': [115.1477,40.8527],\r\n            '徐州': [117.5208,34.3268],\r\n            '德州': [116.6858,37.2107],\r\n            '惠州': [114.6204,23.1647],\r\n            '成都': [103.9526,30.7617],\r\n            '扬州': [119.4653,32.8162],\r\n            '承德': [117.5757,41.4075],\r\n            '拉萨': [91.1865,30.1465],\r\n            '无锡': [120.3442,31.5527],\r\n            '日照': [119.2786,35.5023],\r\n            '昆明': [102.9199,25.4663],\r\n            '杭州': [119.5313,29.8773],\r\n            '枣庄': [117.323,34.8926],\r\n            '柳州': [109.3799,24.9774],\r\n            '株洲': [113.5327,27.0319],\r\n            '武汉': [114.3896,30.6628],\r\n            '汕头': [117.1692,23.3405],\r\n            '江门': [112.6318,22.1484],\r\n            '沈阳': [123.1238,42.1216],\r\n            '沧州': [116.8286,38.2104],\r\n            '河源': [114.917,23.9722],\r\n            '泉州': [118.3228,25.1147],\r\n            '泰安': [117.0264,36.0516],\r\n            '泰州': [120.0586,32.5525],\r\n            '济南': [117.1582,36.8701],\r\n            '济宁': [116.8286,35.3375],\r\n            '海口': [110.3893,19.8516],\r\n            '淄博': [118.0371,36.6064],\r\n            '淮安': [118.927,33.4039],\r\n            '深圳': [114.5435,22.5439],\r\n            '清远': [112.9175,24.3292],\r\n            '温州': [120.498,27.8119],\r\n            '渭南': [109.7864,35.0299],\r\n            '湖州': [119.8608,30.7782],\r\n            '湘潭': [112.5439,27.7075],\r\n            '滨州': [117.8174,37.4963],\r\n            '潍坊': [119.0918,36.524],\r\n            '烟台': [120.7397,37.5128],\r\n            '玉溪': [101.9312,23.8898],\r\n            '珠海': [113.7305,22.1155],\r\n            '盐城': [120.2234,33.5577],\r\n            '盘锦': [121.9482,41.0449],\r\n            '石家庄': [114.4995,38.1006],\r\n            '福州': [119.4543,25.9222],\r\n            '秦皇岛': [119.2126,40.0232],\r\n            '绍兴': [120.564,29.7565],\r\n            '聊城': [115.9167,36.4032],\r\n            '肇庆': [112.1265,23.5822],\r\n            '舟山': [122.2559,30.2234],\r\n            '苏州': [120.6519,31.3989],\r\n            '莱芜': [117.6526,36.2714],\r\n            '菏泽': [115.6201,35.2057],\r\n            '营口': [122.4316,40.4297],\r\n            '葫芦岛': [120.1575,40.578],\r\n            '衡水': [115.8838,37.7161],\r\n            '衢州': [118.6853,28.8666],\r\n            '西宁': [101.4038,36.8207],\r\n            '西安': [109.1162,34.2004],\r\n            '贵阳': [106.6992,26.7682],\r\n            '连云港': [119.1248,34.552],\r\n            '邢台': [114.8071,37.2821],\r\n            '邯郸': [114.4775,36.535],\r\n            '郑州': [113.4668,34.6234],\r\n            '鄂尔多斯': [108.9734,39.2487],\r\n            '重庆': [107.7539,30.1904],\r\n            '金华': [120.0037,29.1028],\r\n            '铜川': [109.0393,35.1947],\r\n            '银川': [106.3586,38.1775],\r\n            '镇江': [119.4763,31.9702],\r\n            '长春': [125.8154,44.2584],\r\n            '长沙': [113.0823,28.2568],\r\n            '长治': [112.8625,36.4746],\r\n            '阳泉': [113.4778,38.0951],\r\n            '青岛': [120.4651,36.3373],\r\n            '韶关': [113.7964,24.7028]\r\n        };\r\n    \r\n        const BJData = [\r\n            [{name:'北京'}, {name:'上海',value:95}],\r\n            [{name:'北京'}, {name:'广州',value:90}],\r\n            [{name:'北京'}, {name:'大连',value:80}],\r\n            [{name:'北京'}, {name:'南宁',value:70}],\r\n            [{name:'北京'}, {name:'南昌',value:60}],\r\n            [{name:'北京'}, {name:'拉萨',value:50}],\r\n            [{name:'北京'}, {name:'长春',value:40}],\r\n            [{name:'北京'}, {name:'包头',value:30}],\r\n            [{name:'北京'}, {name:'重庆',value:20}],\r\n            [{name:'北京'}, {name:'常州',value:10}]\r\n        ];\r\n    \r\n        const SHData = [\r\n            [{name:'上海'},{name:'包头',value:95}],\r\n            [{name:'上海'},{name:'昆明',value:90}],\r\n            [{name:'上海'},{name:'广州',value:80}],\r\n            [{name:'上海'},{name:'郑州',value:70}],\r\n            [{name:'上海'},{name:'长春',value:60}],\r\n            [{name:'上海'},{name:'重庆',value:50}],\r\n            [{name:'上海'},{name:'长沙',value:40}],\r\n            [{name:'上海'},{name:'北京',value:30}],\r\n            [{name:'上海'},{name:'丹东',value:20}],\r\n            [{name:'上海'},{name:'大连',value:10}]\r\n        ];\r\n    \r\n        const GZData = [\r\n            [{name:'广州'},{name:'福州',value:95}],\r\n            [{name:'广州'},{name:'太原',value:90}],\r\n            [{name:'广州'},{name:'长春',value:80}],\r\n            [{name:'广州'},{name:'重庆',value:70}],\r\n            [{name:'广州'},{name:'西安',value:60}],\r\n            [{name:'广州'},{name:'成都',value:50}],\r\n            [{name:'广州'},{name:'常州',value:40}],\r\n            [{name:'广州'},{name:'北京',value:30}],\r\n            [{name:'广州'},{name:'北海',value:20}],\r\n            [{name:'广州'},{name:'海口',value:10}]\r\n        ];\r\n    \r\n        const planePath = 'path://M1705.06,1318.313v-89.254l-319.9-221.799l0.073-208.063c0.521-84.662-26.629-121.796-63.961-121.491c-37.332-0.305-64.482,36.829-63.961,121.491l0.073,208.063l-319.9,221.799v89.254l330.343-157.288l12.238,241.308l-134.449,92.931l0.531,42.034l175.125-42.917l175.125,42.917l0.531-42.034l-134.449-92.931l12.238-241.308L1705.06,1318.313z';\r\n    \r\n        const convertData = function (data) {\r\n            var res = [];\r\n            for (var i = 0; i < data.length; i++) {\r\n                var dataItem = data[i];\r\n                var fromCoord = geoCoordMap[dataItem[0].name];\r\n                var toCoord = geoCoordMap[dataItem[1].name];\r\n                if (fromCoord && toCoord) {\r\n                    res.push({\r\n                        fromName: dataItem[0].name,\r\n                        toName: dataItem[1].name,\r\n                        coords: [fromCoord, toCoord]\r\n                    });\r\n                }\r\n            }\r\n            return res;\r\n        };\r\n    \r\n        const color = ['#a6c84c', '#ffa022', '#46bee9'];\r\n        const series = [];\r\n        [['北京', BJData], ['上海', SHData], ['广州', GZData]].forEach( (item, i) => {\r\n            series.push(\r\n            {\r\n                name: item[0],\r\n                type: 'effectScatter',\r\n                coordinateSystem: 'geo',\r\n                zlevel: 1,\r\n                rippleEffect: {\r\n                    brushType: 'stroke'\r\n                },\r\n                label: {\r\n                    normal: {\r\n                        show: true,\r\n                        position: 'right',\r\n                        formatter: '{b}'\r\n                    }\r\n                },\r\n                symbolSize: 6,\r\n                itemStyle: {\r\n                    normal: {\r\n                        color: color[i]\r\n                    }\r\n                },\r\n                data: this.state.value\r\n                // data: item[1].map(function (dataItem) {\r\n                //     return {\r\n                //         name: dataItem[1].name,\r\n                //         value: geoCoordMap[dataItem[1].name].concat([dataItem[1].value])\r\n                //     };\r\n                // })\r\n            });\r\n        });\r\n    \r\n        const option = {\r\n            backgroundColor: '#404a59',\r\n            title : {\r\n                text: 'Train Stations',\r\n                subtext: 'CSE184 final project',\r\n                left: 'center',\r\n                textStyle : {\r\n                    color: '#fff'\r\n                }\r\n            },\r\n            tooltip : {\r\n                trigger: 'item'\r\n            },\r\n            legend: {\r\n                orient: 'vertical',\r\n                top: 'bottom',\r\n                left: 'right',\r\n                data:['北京 Top10', '上海 Top10', '广州 Top10'],\r\n                textStyle: {\r\n                    color: '#fff'\r\n                },\r\n                selectedMode: 'single'\r\n            },\r\n            geo: {\r\n                map: 'china',\r\n                center:[121.4737,31.2304],\r\n                zoom:5,\r\n                label: {\r\n                    emphasis: {\r\n                        show: false\r\n                    }\r\n                },\r\n                roam: true,\r\n                itemStyle: {\r\n                    normal: {\r\n                        areaColor: '#323c48',\r\n                        borderColor: '#404a59'\r\n                    },\r\n                    emphasis: {\r\n                        areaColor: '#2a333d'\r\n                    }\r\n                }\r\n            },\r\n            series: series\r\n        };\r\n        return option;\r\n      };\r\n      onChartClick = (param) =>{\r\n        try{\r\n            console.log('station:',param.data.name)\r\n            \r\n      }catch(error){\r\n          console.log({error})\r\n      }\r\n      }\r\n      render() {\r\n          let onEvents = {\r\n              'click':this.onChartClick,\r\n              'dataZoom':this.onDataZoom\r\n          }\r\n        return (\r\n          <div className='examples'>\r\n            <div className='parent'>\r\n              \r\n              <ReactEcharts\r\n                ref = {(e) => {this.echarts_react = e;}}\r\n                option={this.getOption()}\r\n                style={{height: '700px', width: '100%'}}\r\n                className='react_for_echarts'\r\n                onEvents = {onEvents} />\r\n            </div>\r\n        </div>\r\n        );\r\n      }\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}