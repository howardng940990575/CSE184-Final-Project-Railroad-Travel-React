{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["require","App","props","getOption","series","push","type","coordinateSystem","zlevel","rippleEffect","brushType","label","normal","show","position","formatter","symbolSize","itemStyle","color","console","log","data","state","showStation","departureStation","forEach","item","index","name","arrivalStation","departureValue","value","find","x","arrivalValue","y","symbol","effect","period","trailLength","lineStyle","width","opacity","curveness","fromName","toName","coords","backgroundColor","title","text","left","textStyle","tooltip","borderWidth","borderRadius","trigger","param","geo","map","center","zoom","emphasis","roam","areaColor","borderColor","onChartClick","clicked","echarts_react","getEchartsInstance","setState","calculateStations","error","calculatePath","onDataZoom","shanghai","shanghai_station","zhejiang","zhejiang_station","jiangsu","jiangsu_station","budget","travelTime","allStations","shanghainan_all","shanghainan_hangzhou","showMainStation","showGreenStation","showRedStation","showTrain","allStation_to_allStation","alldata","handleBudgetChange","bind","handleTravelTimeChange","handleSubmit","i","Object","keys","length","id","replace","maps_y","maps_x","time","parseInt","reachableStations","originStationCoords","this","departureStation_to_allStations","stationCoords","departureStation_to_arrivalStation","eachStation_to_allStation_data","undefined","eachStation_to_eachStation_data","price","rawNeededTime","time_needed","split","rawTravelTime","neededTime","convertTimeToMin","destination","availableTrain","train_number","start_time","arrive_time","TableRow","key","TableCell","align","component","scope","event","target","preventDefault","onEvents","className","style","divStyle","height","ref","e","option","right","top","zIndex","display","alignItems","borderRightWidth","marginLeft","marginTop","onSubmit","fontWeight","onChange","marginHorizontal","justifyContent","marginVertical","shadowOffset","shadowColor","shadowOpacity","bottom","marginRight","Typography","variant","border","font","overflow","Paper","Table","aria-label","TableHead","TableBody","renderList","Component","padding","margin","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.22a78862.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Card, CardContent, Typography, Table, Paper, TableBody, TableHead, TableCell, TableRow } from '@material-ui/core';\r\nimport ReactEcharts from \"echarts-for-react\";\r\nimport shanghai_station from './shanghai_station_english.json'\r\nimport zhejiang_station from './zhejiang_station_english.json'\r\nimport jiangsu_station from './jiangsu_station_english.json'\r\nimport alldata from './all.json'\r\nrequire(\"echarts/map/js/china.js\");\r\nclass App extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        var shanghai = shanghai_station\r\n        var zhejiang = zhejiang_station\r\n        var jiangsu = jiangsu_station\r\n        // var all = alldata\r\n        //console.log(alldata.allStation_to_allStation)\r\n        this.state = {\r\n            zoom: 5,\r\n            departureStation: '',\r\n            arrivalStation: '',\r\n            clicked: false,\r\n            center: [121.4737, 31.2304],\r\n            budget: '500',\r\n            travelTime: '02:00',\r\n            allStations: [],\r\n            shanghainan_all: [],\r\n            shanghainan_hangzhou: [{}],\r\n            value: [{}],\r\n            showStation: [],\r\n            showMainStation: [],\r\n            showGreenStation: [],\r\n            showRedStation: [],\r\n            showTrain: [],\r\n            allStation_to_allStation: alldata.allStation_to_allStation\r\n        }\r\n\r\n        this.handleBudgetChange = this.handleBudgetChange.bind(this);\r\n        this.handleTravelTimeChange = this.handleTravelTimeChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        for (var i = 0; i < Object.keys(shanghai.name).length; i++) {\r\n            if (this.state.allStation_to_allStation.find(x => x.id == shanghai.name[i].replace(\" Railway Station\", \"\"))) {\r\n                this.state.allStations.push(shanghai.name[i].replace(\" Railway Station\", \"\"))\r\n                this.state.value.push({ name: shanghai.name[i].replace(\" Railway Station\", \"\"), value: [shanghai.maps_y[i], shanghai.maps_x[i]] })\r\n                this.state.showStation.push({ name: shanghai.name[i].replace(\" Railway Station\", \"\"), value: [shanghai.maps_y[i], shanghai.maps_x[i]] })\r\n            }\r\n        }\r\n        for (var i = 0; i < Object.keys(zhejiang.name).length; i++) {\r\n            if (this.state.allStation_to_allStation.find(x => x.id == zhejiang.name[i].replace(\" Railway Station\", \"\"))) {\r\n                this.state.allStations.push(zhejiang.name[i].replace(\" Railway Station\", \"\"))\r\n                this.state.value.push({ name: zhejiang.name[i].replace(\" Railway Station\", \"\"), value: [zhejiang.maps_y[i], zhejiang.maps_x[i]] })\r\n                this.state.showStation.push({ name: zhejiang.name[i].replace(\" Railway Station\", \"\"), value: [zhejiang.maps_y[i], zhejiang.maps_x[i]] })\r\n            }\r\n        }\r\n        for (var i = 0; i < Object.keys(jiangsu.name).length; i++) {\r\n            if (this.state.allStation_to_allStation.find(x => x.id == jiangsu.name[i].replace(\" Railway Station\", \"\"))) {\r\n                this.state.allStations.push(jiangsu.name[i].replace(\" Railway Station\", \"\"))\r\n                this.state.value.push({ name: jiangsu.name[i].replace(\" Railway Station\", \"\"), value: [jiangsu.maps_y[i], jiangsu.maps_x[i]] })\r\n                this.state.showStation.push({ name: jiangsu.name[i].replace(\" Railway Station\", \"\"), value: [jiangsu.maps_y[i], jiangsu.maps_x[i]] })\r\n            }\r\n        }\r\n        //this.setState({showStation:this.state.value})\r\n        // var tf = true\r\n        // this.state.allStations.forEach(arrivalStation => {\r\n        //     var all = []\r\n        //     var min = 150\r\n\r\n        //     for (var i = 300; i > min; i--) {\r\n        //         all.push({ price: i, time: i })\r\n        //     }\r\n        //     if (tf) {\r\n        //         all.push({ price: 149, time: 149 })\r\n        //     }\r\n        //     this.state.shanghainan_all.push({ toStation: arrivalStation, data: all })\r\n        //     tf = !tf\r\n        // })\r\n        // for (var i = 0; i < 200 ; i++) {\r\n        //     this.state.shanghainan_hangzhou.push({ price: i, time: i })\r\n        // }\r\n        // this.state.shanghainan_hangzhou.push({ price: 100, time: 30 })\r\n\r\n\r\n        //console.log(\"shanghai\"+this.state.value)\r\n\r\n    }\r\n    convertTimeToMin(time) {\r\n        if (time.length != 2) {\r\n            return null\r\n        } else {\r\n            console.log(\"time::::\", parseInt(time[0], 10) + \" \" + parseInt(time[1], 10))\r\n            return parseInt(time[0], 10) * 60 + parseInt(time[1], 10)\r\n\r\n        }\r\n\r\n    }\r\n    calculateStations(departureStation) {\r\n\r\n        //用户点击了出发城市，触发这个function\r\n        //console.log(this.state.shanghainan_all)\r\n        var reachableStations = [{}]    //根据计算预算和时间后可以到达的城市\r\n        var originStationCoords = this.state.value.find(x => x.name === departureStation)\r\n        reachableStations.push({ name: originStationCoords.name, value: originStationCoords.value })\r\n        //console.log(typeof this.state.allStations_to_allStations)\r\n        var departureStation_to_allStations = this.state.allStation_to_allStation.find(x => x.id == departureStation)\r\n        console.log(\"here\")\r\n        console.log(this.state.allStation_to_allStation.find(x => x.id == departureStation) == null)\r\n        //console.log(departureStation_to_allStations)\r\n        this.state.allStations.forEach(arrivalStation => {\r\n            //console.log(\"arrivalStation:\", arrivalStation)\r\n            //console.log(typeof departureStation_to_allStations)\r\n            var stationCoords = this.state.value.find(x => x.name === arrivalStation)\r\n            var departureStation_to_arrivalStation = departureStation_to_allStations.eachStation_to_allStation_data.find(x => x.id === arrivalStation)\r\n            if (departureStation_to_arrivalStation != undefined) {\r\n                //console.log(departureStation_to_arrivalStation.eachStation_to_eachStation_data.price[0])\r\n                for (var i = 0; i < departureStation_to_arrivalStation.eachStation_to_eachStation_data.price.length; i++) {\r\n                    //console.log(departureStation_to_arrivalStation.eachStation_to_eachStation_data.price[i] + ' ' + departureStation_to_arrivalStation.eachStation_to_eachStation_data.time_needed[i])\r\n                    var rawNeededTime = departureStation_to_arrivalStation.eachStation_to_eachStation_data.time_needed[i].split(\":\")\r\n                    //console.log(departureStation_to_arrivalStation.eachStation_to_eachStation_data.time_needed[i])\r\n                    //console.log(departureStation_to_arrivalStation.eachStation_to_eachStation_data.time_needed[i].split(\":\"))\r\n                    //var time_needed = new Date();\r\n                    var rawTravelTime = this.state.travelTime.split(\":\")\r\n                    var neededTime = this.convertTimeToMin(rawNeededTime)\r\n                    var travelTime = this.convertTimeToMin(rawTravelTime)\r\n                    console.log(rawNeededTime + ' ' + rawTravelTime)\r\n                    console.log(neededTime + ' ' + travelTime)\r\n                    if (departureStation_to_arrivalStation.eachStation_to_eachStation_data.price[i] <= this.state.budget && neededTime <= travelTime && departureStation_to_arrivalStation.eachStation_to_eachStation_data.price[i] > 0) { //如果价钱低于预算且需时低于旅游时间\r\n                        reachableStations.push({ name: stationCoords.name, value: stationCoords.value })\r\n                        //this.setState({ showStation: reachableStations })\r\n                        break\r\n                    }\r\n                }\r\n                //console.log(departureStation_to_arrivalStation.eachStation_to_eachStation_data)\r\n            } else {\r\n                console.log(\"arrivalStation undefined:\", arrivalStation)\r\n            }\r\n            // for(var i = 0;i < Object.keys(departureStation_to_arrivalStation.eachStation_to_eachStation_data).length;i++){\r\n            //    // console.log(departureStation_to_arrivalStation.price[i]+' ' +departureStation_to_arrivalStation[i])\r\n            // }\r\n            //console.log(departureStation_to_arrivalStation)\r\n        })\r\n        this.setState({ departureStation: departureStation })\r\n        this.setState({ showStation: reachableStations })\r\n        this.setState({ clicked: true })\r\n        // var departureStation_to_allStations = allStations_to_allStations.find(x=>x.id == departureStation) //从所有站到所有站点中，找出用户点击的出发站到所有站的数据\r\n        // this.state.allStations.forEach(arrivalStation =>{//游历所有站\r\n        //     var stationCoords = this.state.value.find(x => x.name == arrivalStation)//取出当前游历到的station的坐标数据\r\n        //     var departureStation_to_arrivalStation = departureStation_to_allStations.find(x=>x.id == arrivalStation)//从出发站到所有站的数据中，找出出发站到当前游历到的站的数据\r\n        //     departureStation_to_arrivalStation.data.forEach(item =>{//游历每个车次\r\n        //         if (item.price < budget && item.time < travelTime) { //如果价钱低于预算且需时低于旅游时间\r\n        //             reachableStations.push({ name: stationCoords.name, value: stationCoords.value })//把当前station的坐标数据push到可到达城市列表里\r\n        //         }\r\n        //     })\r\n        // })\r\n        // this.setState({ value: reachableStations })//最后更新地图上显示的点\r\n\r\n\r\n        // this.state.allStations.forEach(arrivalStation => {\r\n        //     //console.log(departureStation, arrivalStation)\r\n        //     var stationCoords = this.state.value.find(x => x.name == arrivalStation)\r\n        //     var arraivalStationData = this.state.shanghainan_all.find(x => x.toStation == arrivalStation)\r\n        //     //console.log(arraivalStationData)\r\n        //     arraivalStationData.data.forEach(item => {\r\n        //         if (item.price < 150 && item.time < 150) {\r\n        //             reachableStations.push({ name: stationCoords.name, value: stationCoords.value })\r\n        //             console.log(\"yes\");\r\n        //             //this.state.value.pop()\r\n        //         }\r\n        //     })\r\n        // })\r\n        // this.setState({ value: reachableStations })\r\n        // console.log(\"yes\");\r\n    }\r\n\r\n    calculatePath(destination) {\r\n\r\n        var availableTrain = []\r\n        this.setState({ arrivalStation: destination })\r\n        console.log('arrive station ' + this.state.arrivalStation)\r\n        console.log('departure station ' + this.state.departureStation)\r\n        console.log(\"second click\")\r\n\r\n        var departureStation_to_allStations = this.state.allStation_to_allStation.find(x => x.id == this.state.departureStation)\r\n        var departureStation_to_arrivalStation = departureStation_to_allStations.eachStation_to_allStation_data.find(x => x.id == this.state.arrivalStation)\r\n        console.log(departureStation_to_arrivalStation.eachStation_to_eachStation_data)\r\n        for (var i = 0; i < departureStation_to_arrivalStation.eachStation_to_eachStation_data.price.length; i++) {\r\n            var rawNeededTime = departureStation_to_arrivalStation.eachStation_to_eachStation_data.time_needed[i].split(\":\")\r\n            var rawTravelTime = this.state.travelTime.split(\":\")\r\n            var neededTime = this.convertTimeToMin(rawNeededTime)\r\n            var travelTime = this.convertTimeToMin(rawTravelTime)\r\n            if (departureStation_to_arrivalStation.eachStation_to_eachStation_data.price[i] <= this.state.budget && neededTime <= travelTime && departureStation_to_arrivalStation.eachStation_to_eachStation_data.price[i] > 0) { //如果价钱低于预算且需时低于旅游时间\r\n                availableTrain.push({\r\n                    train_number: departureStation_to_arrivalStation.eachStation_to_eachStation_data.train_number[i],\r\n                    start_time: departureStation_to_arrivalStation.eachStation_to_eachStation_data.start_time[i],\r\n                    arrive_time: departureStation_to_arrivalStation.eachStation_to_eachStation_data.arrive_time[i],\r\n                    price: departureStation_to_arrivalStation.eachStation_to_eachStation_data.price[i]\r\n                })\r\n                //this.setState({ showStation: reachableStations })\r\n\r\n            }\r\n        }\r\n        console.log(availableTrain)\r\n        this.setState({ showTrain: availableTrain })\r\n\r\n\r\n    }\r\n\r\n    renderList(showTrain) {\r\n        return (\r\n            <TableRow key={showTrain.start_time}>\r\n              <TableCell align=\"center\" component=\"th\" scope=\"row\">\r\n                {showTrain.train_number}\r\n              </TableCell>\r\n              <TableCell align=\"center\">{showTrain.start_time}</TableCell>\r\n              <TableCell align=\"center\">{showTrain.arrive_time}</TableCell>\r\n              <TableCell align=\"center\">{showTrain.price}</TableCell>\r\n              \r\n            </TableRow>\r\n        );\r\n    }\r\n\r\n\r\n    getOption = () => {\r\n\r\n\r\n        const geoCoordMap = {\r\n            'sbb': [121.4648, 31.2891],\r\n            '东莞': [113.8953, 22.901],\r\n            '东营': [118.7073, 37.5513],\r\n            '中山': [113.4229, 22.478],\r\n            '临汾': [111.4783, 36.1615],\r\n            '临沂': [118.3118, 35.2936],\r\n            '丹东': [124.541, 40.4242],\r\n            '丽水': [119.5642, 28.1854],\r\n            '乌鲁木齐': [87.9236, 43.5883],\r\n            '佛山': [112.8955, 23.1097],\r\n            '保定': [115.0488, 39.0948],\r\n            '兰州': [103.5901, 36.3043],\r\n            '包头': [110.3467, 41.4899],\r\n            '北京': [116.4551, 40.2539],\r\n            '北海': [109.314, 21.6211],\r\n            '南京': [118.8062, 31.9208],\r\n            '南宁': [108.479, 23.1152],\r\n            '南昌': [116.0046, 28.6633],\r\n            '南通': [121.1023, 32.1625],\r\n            '厦门': [118.1689, 24.6478],\r\n            '台州': [121.1353, 28.6688],\r\n            '合肥': [117.29, 32.0581],\r\n            '呼和浩特': [111.4124, 40.4901],\r\n            '咸阳': [108.4131, 34.8706],\r\n            '哈尔滨': [127.9688, 45.368],\r\n            '唐山': [118.4766, 39.6826],\r\n            '嘉兴': [120.9155, 30.6354],\r\n            '大同': [113.7854, 39.8035],\r\n            '大连': [122.2229, 39.4409],\r\n            '天津': [117.4219, 39.4189],\r\n            '太原': [112.3352, 37.9413],\r\n            '威海': [121.9482, 37.1393],\r\n            '宁波': [121.5967, 29.6466],\r\n            '宝鸡': [107.1826, 34.3433],\r\n            '宿迁': [118.5535, 33.7775],\r\n            '常州': [119.4543, 31.5582],\r\n            '广州': [113.5107, 23.2196],\r\n            '廊坊': [116.521, 39.0509],\r\n            '延安': [109.1052, 36.4252],\r\n            '张家口': [115.1477, 40.8527],\r\n            '徐州': [117.5208, 34.3268],\r\n            '德州': [116.6858, 37.2107],\r\n            '惠州': [114.6204, 23.1647],\r\n            '成都': [103.9526, 30.7617],\r\n            '扬州': [119.4653, 32.8162],\r\n            '承德': [117.5757, 41.4075],\r\n            '拉萨': [91.1865, 30.1465],\r\n            '无锡': [120.3442, 31.5527],\r\n            '日照': [119.2786, 35.5023],\r\n            '昆明': [102.9199, 25.4663],\r\n            '杭州': [119.5313, 29.8773],\r\n            '枣庄': [117.323, 34.8926],\r\n            '柳州': [109.3799, 24.9774],\r\n            '株洲': [113.5327, 27.0319],\r\n            '武汉': [114.3896, 30.6628],\r\n            '汕头': [117.1692, 23.3405],\r\n            '江门': [112.6318, 22.1484],\r\n            '沈阳': [123.1238, 42.1216],\r\n            '沧州': [116.8286, 38.2104],\r\n            '河源': [114.917, 23.9722],\r\n            '泉州': [118.3228, 25.1147],\r\n            '泰安': [117.0264, 36.0516],\r\n            '泰州': [120.0586, 32.5525],\r\n            '济南': [117.1582, 36.8701],\r\n            '济宁': [116.8286, 35.3375],\r\n            '海口': [110.3893, 19.8516],\r\n            '淄博': [118.0371, 36.6064],\r\n            '淮安': [118.927, 33.4039],\r\n            '深圳': [114.5435, 22.5439],\r\n            '清远': [112.9175, 24.3292],\r\n            '温州': [120.498, 27.8119],\r\n            '渭南': [109.7864, 35.0299],\r\n            '湖州': [119.8608, 30.7782],\r\n            '湘潭': [112.5439, 27.7075],\r\n            '滨州': [117.8174, 37.4963],\r\n            '潍坊': [119.0918, 36.524],\r\n            '烟台': [120.7397, 37.5128],\r\n            '玉溪': [101.9312, 23.8898],\r\n            '珠海': [113.7305, 22.1155],\r\n            '盐城': [120.2234, 33.5577],\r\n            '盘锦': [121.9482, 41.0449],\r\n            '石家庄': [114.4995, 38.1006],\r\n            '福州': [119.4543, 25.9222],\r\n            '秦皇岛': [119.2126, 40.0232],\r\n            '绍兴': [120.564, 29.7565],\r\n            '聊城': [115.9167, 36.4032],\r\n            '肇庆': [112.1265, 23.5822],\r\n            '舟山': [122.2559, 30.2234],\r\n            '苏州': [120.6519, 31.3989],\r\n            '莱芜': [117.6526, 36.2714],\r\n            '菏泽': [115.6201, 35.2057],\r\n            '营口': [122.4316, 40.4297],\r\n            '葫芦岛': [120.1575, 40.578],\r\n            '衡水': [115.8838, 37.7161],\r\n            '衢州': [118.6853, 28.8666],\r\n            '西宁': [101.4038, 36.8207],\r\n            '西安': [109.1162, 34.2004],\r\n            '贵阳': [106.6992, 26.7682],\r\n            '连云港': [119.1248, 34.552],\r\n            '邢台': [114.8071, 37.2821],\r\n            '邯郸': [114.4775, 36.535],\r\n            '郑州': [113.4668, 34.6234],\r\n            '鄂尔多斯': [108.9734, 39.2487],\r\n            '重庆': [107.7539, 30.1904],\r\n            '金华': [120.0037, 29.1028],\r\n            '铜川': [109.0393, 35.1947],\r\n            '银川': [106.3586, 38.1775],\r\n            '镇江': [119.4763, 31.9702],\r\n            '长春': [125.8154, 44.2584],\r\n            '长沙': [113.0823, 28.2568],\r\n            '长治': [112.8625, 36.4746],\r\n            '阳泉': [113.4778, 38.0951],\r\n            '青岛': [120.4651, 36.3373],\r\n            '韶关': [113.7964, 24.7028]\r\n        };\r\n\r\n        const trainPath = 'path://M367.837,89.25h-54.824v-51h121.125c6.375,0,12.75,6.375,12.75,12.75c0,10.2,8.926,19.125,19.125,19.125S485.138,61.2,485.138,51c0-28.05-22.949-51-51-51h-280.5c-28.05,0-51,22.95-51,51c0,10.2,8.925,19.125,19.125,19.125c10.2,0,19.125-8.925,19.125-19.125c0-7.65,5.1-12.75,12.75-12.75h121.125v49.725h-54.825c-62.475,0-112.2,51-112.2,112.2v229.501c0,25.5,17.85,47.174,43.35,51l-36.975,70.125c-6.375,12.75-1.275,28.049,10.2,34.424c3.825,2.551,7.65,2.551,11.475,2.551c8.925,0,17.85-5.1,22.95-14.025l7.65-15.301h252.449l7.65,15.301c5.1,8.926,14.025,14.025,22.951,14.025c3.824,0,7.648-1.275,11.475-2.551c12.75-6.375,17.85-21.674,10.199-34.424l-36.975-70.125c24.225-3.826,43.35-25.5,43.35-51V201.45C480.038,138.975,429.038,89.25,367.837,89.25z M398.438,436.051c-20.4,0-36.977-16.576-36.977-36.977c0-20.398,16.576-36.975,36.977-36.975c20.398,0,36.975,16.576,36.975,36.975C435.413,419.475,418.837,436.051,398.438,436.051zM153.638,215.475c0-39.525,31.875-70.125,71.4-70.125h140.25c39.525,0,71.4,31.875,71.4,70.125v62.475c0,14.025-11.477,24.226-25.5,24.226H177.863c-14.025,0-25.5-10.201-25.5-24.226C153.638,277.95,153.638,215.475,153.638,215.475zM189.337,360.824c20.4,0,36.975,16.576,36.975,36.977c0,20.398-16.575,36.975-36.975,36.975c-20.4,0-36.975-16.576-36.975-36.975C152.363,377.4,168.938,360.824,189.337,360.824z M186.788,522.75l20.4-39.525h172.126l20.398,39.525H186.788z';\r\n\r\n\r\n\r\n        const renderColor = () => {\r\n            console.log(\"times\")\r\n\r\n            return \"#52616b\"\r\n        }\r\n        const color = ['#000000', '#ffffff', '#52616b'];\r\n        const series = [];\r\n\r\n\r\n\r\n\r\n        //console.log(\"item.name:\",item.name)\r\n        series.push(\r\n            {\r\n\r\n                type: 'effectScatter',\r\n                coordinateSystem: 'geo',\r\n                zlevel: 1,\r\n                rippleEffect: {\r\n                    brushType: 'stroke'\r\n                },\r\n                label: {\r\n                    normal: {\r\n                        show: true,\r\n                        position: 'right',\r\n                        formatter: '{b}'\r\n\r\n                    }\r\n                },\r\n                symbolSize: 10,\r\n                itemStyle: {\r\n                    normal: {\r\n\r\n                        color: renderColor()\r\n                    }\r\n                },\r\n                data: this.state.showStation\r\n\r\n            })\r\n        if (this.state.departureStation != '') {\r\n            this.state.showStation.forEach((item, index) => {\r\n                if (item.name == this.state.departureStation) {\r\n                    console.log(\"nmsl\", item)\r\n                    series.push(\r\n                        {\r\n\r\n                            type: 'effectScatter',\r\n                            coordinateSystem: 'geo',\r\n                            zlevel: 2,\r\n                            rippleEffect: {\r\n                                brushType: 'stroke'\r\n                            },\r\n                            label: {\r\n                                normal: {\r\n                                    show: true,\r\n                                    position: 'right',\r\n                                    formatter: '{b}'\r\n                                }\r\n                            },\r\n                            symbolSize: 10,\r\n                            itemStyle: {\r\n                                normal: {\r\n\r\n                                    color: \"#00adb5\"\r\n                                }\r\n                            },\r\n                            data: [item]\r\n                        })\r\n\r\n                }\r\n            })\r\n\r\n        }\r\n        else {\r\n            series.push(\r\n                {\r\n\r\n                    type: 'effectScatter',\r\n                    coordinateSystem: 'geo',\r\n                    zlevel: 2,\r\n                    rippleEffect: {\r\n                        brushType: 'stroke'\r\n                    },\r\n                    label: {\r\n                        normal: {\r\n                            show: true,\r\n                            position: 'right',\r\n                            formatter: '{b}'\r\n                        }\r\n                    },\r\n                    symbolSize: 10,\r\n                    itemStyle: {\r\n                        normal: {\r\n\r\n                            color: \"#00adb5\"\r\n                        }\r\n                    },\r\n                    data: []\r\n\r\n                    //data: [item]\r\n                    // data: item[1].map(function (dataItem) {\r\n                    //     return {\r\n                    //         name: dataItem[1].name,\r\n                    //         value: geoCoordMap[dataItem[1].name].concat([dataItem[1].value])\r\n                    //     };\r\n                    // })\r\n                })\r\n        }\r\n\r\n        if (this.state.arrivalStation != '') {\r\n            this.state.showStation.forEach((item, index) => {\r\n                if (item.name == this.state.arrivalStation) {\r\n                    console.log(\"nmsl\", item)\r\n                    series.push(\r\n                        {\r\n\r\n                            type: 'effectScatter',\r\n                            coordinateSystem: 'geo',\r\n                            zlevel: 2,\r\n                            rippleEffect: {\r\n                                brushType: 'stroke'\r\n                            },\r\n                            label: {\r\n                                normal: {\r\n                                    show: true,\r\n                                    position: 'right',\r\n                                    formatter: '{b}'\r\n                                }\r\n                            },\r\n                            symbolSize: 10,\r\n                            itemStyle: {\r\n                                normal: {\r\n\r\n                                    color: \"#ff5722\"\r\n                                }\r\n                            },\r\n                            data: [item]\r\n                            // data: item[1].map(function (dataItem) {\r\n                            //     return {\r\n                            //         name: dataItem[1].name,\r\n                            //         value: geoCoordMap[dataItem[1].name].concat([dataItem[1].value])\r\n                            //     };\r\n                            // })\r\n                        })\r\n\r\n                }\r\n            })\r\n\r\n        }\r\n        else {\r\n            series.push(\r\n                {\r\n\r\n                    type: 'effectScatter',\r\n                    coordinateSystem: 'geo',\r\n                    zlevel: 2,\r\n                    rippleEffect: {\r\n                        brushType: 'stroke'\r\n                    },\r\n                    label: {\r\n                        normal: {\r\n                            show: true,\r\n                            position: 'right',\r\n                            formatter: '{b}'\r\n                        }\r\n                    },\r\n                    symbolSize: 10,\r\n                    itemStyle: {\r\n                        normal: {\r\n\r\n                            color: \"#00adb5\"\r\n                        }\r\n                    },\r\n                    data: []\r\n                })\r\n        }\r\n        if (this.state.arrivalStation != '' && this.state.departureStation != '') {\r\n            var departureValue = this.state.value.find(x => x.name == this.state.departureStation)\r\n            var arrivalValue = this.state.value.find(y => y.name == this.state.arrivalStation)\r\n            console.log(departureValue.value)\r\n            series.push(\r\n                {\r\n                    //name: item[0] + ' Top10',\r\n                    type: 'lines',\r\n                    zlevel: 2,\r\n                    symbol: ['none', 'arrow'],\r\n                    symbolSize: 10,\r\n                    effect: {\r\n                        show: true,\r\n                        period: 6,\r\n                        trailLength: 0,\r\n                        symbol: trainPath,\r\n                        symbolSize: 15\r\n                    },\r\n                    lineStyle: {\r\n                        normal: {\r\n                            color: '#000',\r\n                            width: 1,\r\n                            opacity: 0.6,\r\n                            curveness: 0.2\r\n                        }\r\n                    },\r\n                    data: [{ fromName: departureValue.name, toName: arrivalValue.name, coords: [departureValue.value, arrivalValue.value] }]\r\n                },\r\n\r\n\r\n            )\r\n\r\n        }\r\n\r\n\r\n        console.log(\"initialize:\", series)\r\n\r\n        const option = {\r\n            backgroundColor: '#a8d8ea',\r\n            title: {\r\n                text: 'Train Stations in China',\r\n\r\n                left: 'center',\r\n                textStyle: {\r\n                    color: '#000'\r\n                }\r\n            },\r\n            tooltip: {\r\n                backgroundColor: 'rgba(255,255,255,0.7)',\r\n                borderWidth: 1,\r\n                borderRadius: 5,\r\n                textStyle: {\r\n                    color: '#000'\r\n                },\r\n                trigger: 'item',\r\n                formatter: (param) => {\r\n                    return \"Station Name: \" + param.name\r\n                }\r\n            },\r\n\r\n            geo: {\r\n                map: 'china',\r\n                center: this.state.center,\r\n                zoom: this.state.zoom,\r\n                label: {\r\n                    emphasis: {\r\n                        show: false\r\n                    }\r\n                },\r\n                roam: true,\r\n                itemStyle: {\r\n                    normal: {\r\n                        areaColor: '#f0f5f9',\r\n                        borderColor: '#404a59'\r\n                    },\r\n                    emphasis: {\r\n                        areaColor: '#c9d6df'\r\n                    }\r\n                }\r\n            },\r\n            series: series\r\n        };\r\n        return option;\r\n    };\r\n    onChartClick = (param) => {\r\n\r\n        if (this.state.clicked == false) {\r\n            try {\r\n                console.log('First station:', param.data.name)\r\n                console.log('color station:', this.echarts_react)\r\n                var center = this.echarts_react.getEchartsInstance().getOption().geo[0].center\r\n                var zoom = this.echarts_react.getEchartsInstance().getOption().geo[0].zoom\r\n                this.setState({ center: center })\r\n                //this.render()\r\n                //this.echarts_react.getEchartsInstance().setOption({geo:[{zoom:5}]})\r\n                this.setState({ zoom: zoom })\r\n                console.log(\"chulaila:\", this.echarts_react.getEchartsInstance().getOption().geo[0])\r\n                this.calculateStations(param.data.name)\r\n\r\n            } catch (error) {\r\n                console.log({ error })\r\n            }\r\n        }\r\n        else {\r\n            //second click\r\n            try {\r\n                if (this.state.departureStation != this.state.arrivalStation) {\r\n                    var center = this.echarts_react.getEchartsInstance().getOption().geo[0].center\r\n                    var zoom = this.echarts_react.getEchartsInstance().getOption().geo[0].zoom\r\n                    this.setState({ center: center })\r\n                    this.setState({ zoom: zoom })\r\n                    console.log(\"chulaila:\", this.echarts_react.getEchartsInstance().getOption().geo[0])\r\n                    console.log(\"kankan\", this.echarts_react)\r\n                    console.log(\"chulaila:\", this.echarts_react.getEchartsInstance().getOption())\r\n                    console.log('Second station:', param.data.name)\r\n                    //console.log('series length:', series.length)\r\n                    this.calculatePath(param.data.name)\r\n                }\r\n\r\n            } catch (error) {\r\n                console.log({ error })\r\n            }\r\n\r\n\r\n        }\r\n        //this.setState({ value: [{ name: 'beijing', value: [116.4551, 40.2539] }] })\r\n\r\n    }\r\n    onDataZoom = (data) => {\r\n        console.log(\"zoom: \", data)\r\n    }\r\n    handleBudgetChange(event) {\r\n        var center = this.echarts_react.getEchartsInstance().getOption().geo[0].center\r\n        var zoom = this.echarts_react.getEchartsInstance().getOption().geo[0].zoom\r\n        this.setState({ center: center })\r\n        this.setState({ zoom: zoom })\r\n        if (event.target.value == '') {\r\n            this.setState({ budget:\"10000\"});\r\n        }\r\n        else {\r\n            this.setState({ budget: event.target.value });\r\n        }\r\n        \r\n    }\r\n    handleTravelTimeChange(event) {\r\n        var center = this.echarts_react.getEchartsInstance().getOption().geo[0].center\r\n        var zoom = this.echarts_react.getEchartsInstance().getOption().geo[0].zoom\r\n        this.setState({ center: center })\r\n        this.setState({ zoom: zoom })\r\n        if (event.target.value == '') {\r\n            this.setState({ travelTime: \"99:00\" });\r\n        }\r\n        else {\r\n            this.setState({ travelTime: event.target.value });\r\n        }\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        var center = this.echarts_react.getEchartsInstance().getOption().geo[0].center\r\n        var zoom = this.echarts_react.getEchartsInstance().getOption().geo[0].zoom\r\n        this.setState({ center: center })\r\n        this.setState({ zoom: zoom })\r\n        this.setState({ showGreenStation: [] })\r\n        this.setState({ showStation: this.state.value })\r\n        this.setState({ clicked: false })\r\n        this.setState({ arrivalStation: '' })\r\n        this.setState({ departureStation: '' })\r\n        this.setState({ showTrain: [] })\r\n        //alert('A name was submitted: ' + this.state.budget + \" \" + this.state.travelTime);\r\n        event.preventDefault();\r\n    }\r\n    render() {\r\n        let onEvents = {\r\n            'click': this.onChartClick,\r\n            'dataZoom': this.onDataZoom\r\n        }\r\n        return (\r\n\r\n            <div className='examples' style={divStyle}>\r\n\r\n\r\n                <div className='parent' style={{ width: \"100%\", height: \"100%\" }} >\r\n\r\n                    <ReactEcharts\r\n                        ref={(e) => { this.echarts_react = e; }}\r\n                        option={this.getOption()}\r\n                        style={{ height: '937px', width: '100%' }}\r\n                        className='react_for_echarts'\r\n                        onEvents={onEvents} />\r\n\r\n                </div>\r\n                <div className='minibox' style={{ position: 'absolute', right: 30, top: 30, zIndex: 15 }} >\r\n                    <div className='form' style={{ width: \"80%\", height: \"100%\", display: 'flex', alignItems: 'center' }}>\r\n                        <div className='parent' style={{ width: 300, height: 200, alignItems: 'center', backgroundColor: '#fafafa', borderRightWidth: 1, borderColor: 'black', display: 'row' }}>\r\n                            <form style={{ marginLeft: 30, marginTop: 20 }} onSubmit={this.handleSubmit}>\r\n                                <label style={{ fontWeight: 'bold', color: '#393e46' }}>\r\n                                    Budget:<br></br>\r\n                                    <input type=\"text\" value={this.state.budget} onChange={this.handleBudgetChange} /><br></br>\r\n                                </label>\r\n                                <label style={{ fontWeight: 'bold', color: '#393e46' }}>\r\n                                    Travel Time:<br></br>\r\n                                    <input type=\"text\" value={this.state.travelTime} onChange={this.handleTravelTimeChange} /><br></br>\r\n                                </label>\r\n                                <input style={{ marginLeft: 40, marginTop: 40, backgroundColor: 'white', height: 30, marginHorizontal: 20, borderRadius: 15, alignItems: 'center', justifyContent: 'center', marginVertical: 5, shadowOffset: { width: 2, height: 2 }, shadowColor: 'black', shadowOpacity: 0.2 }} type=\"submit\" value=\"Reset Map\" />\r\n                            </form>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n                <div style={{ position: 'absolute', left: 30, bottom: 30, zIndex: 15 }} >\r\n\r\n                </div>\r\n                {this.state.showTrain.length > 0 ? (\r\n                    <div style={{ position: 'absolute',marginRight:60, right: 30, bottom: 30, zIndex: 15 }} >\r\n                        <Typography variant=\"h6\" component=\"h6\" align=\"right\">{\"Departure Station: \"+this.state.departureStation}</Typography>\r\n                        <Typography variant=\"h6\" component=\"h6\" align=\"right\">{\"Arrival Station: \"+this.state.arrivalStation}</Typography>\r\n                        <div style={{backgroundColor:'#f0f5f9',height:400,width:500, border:1, font:16/26, overflow:'auto'}}>\r\n                        <Paper >\r\n                            <Table  aria-label=\"customized table\">\r\n                                <TableHead style={{backgroundColor:\"#52616b\"}}>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"center\" style={{color:'#fff'}}>Train Number:</TableCell>\r\n                                        <TableCell align=\"center\" style={{color:'#fff'}}>Start Time:</TableCell>\r\n                                        <TableCell align=\"center\" style={{color:'#fff'}}>arrival Time:</TableCell>\r\n                                        <TableCell align=\"center\" style={{color:'#fff'}}>Price(¥)</TableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                <TableBody>\r\n\r\n\r\n                                    {this.state.showTrain.map(showTrain => (\r\n\r\n\r\n\r\n                                        this.renderList(showTrain)\r\n\r\n\r\n\r\n                                    ))}\r\n\r\n                                </TableBody>\r\n                            </Table>\r\n                        </Paper>\r\n                        </div>\r\n                    </div>\r\n\r\n                ) : null}\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst divStyle = {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    padding: 0,\r\n    margin: 0\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}